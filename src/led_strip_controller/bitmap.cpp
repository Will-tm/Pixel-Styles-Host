/*
 * bitmap.cpp - Custom Bitmap class
 *
 * Copyright (C) 2013 William Markezana <william.markezana@me.com>
 *
 */

#include "bitmap.h"

/*
 * private constants
 *
 */
static const uint8_t font[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x5B, 0x4F, 0x5B, 0x3E, 0x3E, 0x6B, 0x4F, 0x6B, 0x3E, 0x1C, 0x3E, 0x7C,
		0x3E, 0x1C, 0x18, 0x3C, 0x7E, 0x3C, 0x18, 0x1C, 0x57, 0x7D, 0x57, 0x1C, 0x1C, 0x5E, 0x7F, 0x5E, 0x1C, 0x00, 0x18, 0x3C, 0x18, 0x00,
		0xFF, 0xE7, 0xC3, 0xE7, 0xFF, 0x00, 0x18, 0x24, 0x18, 0x00, 0xFF, 0xE7, 0xDB, 0xE7, 0xFF, 0x30, 0x48, 0x3A, 0x06, 0x0E, 0x26, 0x29,
		0x79, 0x29, 0x26, 0x40, 0x7F, 0x05, 0x05, 0x07, 0x40, 0x7F, 0x05, 0x25, 0x3F, 0x5A, 0x3C, 0xE7, 0x3C, 0x5A, 0x7F, 0x3E, 0x1C, 0x1C,
		0x08, 0x08, 0x1C, 0x1C, 0x3E, 0x7F, 0x14, 0x22, 0x7F, 0x22, 0x14, 0x5F, 0x5F, 0x00, 0x5F, 0x5F, 0x06, 0x09, 0x7F, 0x01, 0x7F, 0x00,
		0x66, 0x89, 0x95, 0x6A, 0x60, 0x60, 0x60, 0x60, 0x60, 0x94, 0xA2, 0xFF, 0xA2, 0x94, 0x08, 0x04, 0x7E, 0x04, 0x08, 0x10, 0x20, 0x7E,
		0x20, 0x10, 0x08, 0x08, 0x2A, 0x1C, 0x08, 0x08, 0x1C, 0x2A, 0x08, 0x08, 0x1E, 0x10, 0x10, 0x10, 0x10, 0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
		0x30, 0x38, 0x3E, 0x38, 0x30, 0x06, 0x0E, 0x3E, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x07,
		0x00, 0x07, 0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x23, 0x13, 0x08, 0x64, 0x62, 0x36, 0x49, 0x56, 0x20,
		0x50, 0x00, 0x08, 0x07, 0x03, 0x00, 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x41, 0x22, 0x1C, 0x00, 0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 0x08,
		0x08, 0x3E, 0x08, 0x08, 0x00, 0x80, 0x70, 0x30, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x60, 0x60, 0x00, 0x20, 0x10, 0x08,
		0x04, 0x02, 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x42, 0x7F, 0x40, 0x00, 0x72, 0x49, 0x49, 0x49, 0x46, 0x21, 0x41, 0x49, 0x4D, 0x33,
		0x18, 0x14, 0x12, 0x7F, 0x10, 0x27, 0x45, 0x45, 0x45, 0x39, 0x3C, 0x4A, 0x49, 0x49, 0x31, 0x41, 0x21, 0x11, 0x09, 0x07, 0x36, 0x49,
		0x49, 0x49, 0x36, 0x46, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x40, 0x34, 0x00, 0x00, 0x00, 0x08, 0x14, 0x22,
		0x41, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x41, 0x22, 0x14, 0x08, 0x02, 0x01, 0x59, 0x09, 0x06, 0x3E, 0x41, 0x5D, 0x59, 0x4E, 0x7C,
		0x12, 0x11, 0x12, 0x7C, 0x7F, 0x49, 0x49, 0x49, 0x36, 0x3E, 0x41, 0x41, 0x41, 0x22, 0x7F, 0x41, 0x41, 0x41, 0x3E, 0x7F, 0x49, 0x49,
		0x49, 0x41, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x3E, 0x41, 0x41, 0x51, 0x73, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x41, 0x7F, 0x41, 0x00,
		0x20, 0x40, 0x41, 0x3F, 0x01, 0x7F, 0x08, 0x14, 0x22, 0x41, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x7F, 0x02, 0x1C, 0x02, 0x7F, 0x7F, 0x04,
		0x08, 0x10, 0x7F, 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x7F, 0x09, 0x09, 0x09, 0x06, 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x7F, 0x09, 0x19, 0x29,
		0x46, 0x26, 0x49, 0x49, 0x49, 0x32, 0x03, 0x01, 0x7F, 0x01, 0x03, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x3F,
		0x40, 0x38, 0x40, 0x3F, 0x63, 0x14, 0x08, 0x14, 0x63, 0x03, 0x04, 0x78, 0x04, 0x03, 0x61, 0x59, 0x49, 0x4D, 0x43, 0x00, 0x7F, 0x41,
		0x41, 0x41, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x41, 0x41, 0x41, 0x7F, 0x04, 0x02, 0x01, 0x02, 0x04, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x00, 0x03, 0x07, 0x08, 0x00, 0x20, 0x54, 0x54, 0x78, 0x40, 0x7F, 0x28, 0x44, 0x44, 0x38, 0x38, 0x44, 0x44, 0x44, 0x28, 0x38, 0x44,
		0x44, 0x28, 0x7F, 0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x08, 0x7E, 0x09, 0x02, 0x18, 0xA4, 0xA4, 0x9C, 0x78, 0x7F, 0x08, 0x04, 0x04,
		0x78, 0x00, 0x44, 0x7D, 0x40, 0x00, 0x20, 0x40, 0x40, 0x3D, 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00, 0x7C,
		0x04, 0x78, 0x04, 0x78, 0x7C, 0x08, 0x04, 0x04, 0x78, 0x38, 0x44, 0x44, 0x44, 0x38, 0xFC, 0x18, 0x24, 0x24, 0x18, 0x18, 0x24, 0x24,
		0x18, 0xFC, 0x7C, 0x08, 0x04, 0x04, 0x08, 0x48, 0x54, 0x54, 0x54, 0x24, 0x04, 0x04, 0x3F, 0x44, 0x24, 0x3C, 0x40, 0x40, 0x20, 0x7C,
		0x1C, 0x20, 0x40, 0x20, 0x1C, 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x44, 0x28, 0x10, 0x28, 0x44, 0x4C, 0x90, 0x90, 0x90, 0x7C, 0x44, 0x64,
		0x54, 0x4C, 0x44, 0x00, 0x08, 0x36, 0x41, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x41, 0x36, 0x08, 0x00, 0x02, 0x01, 0x02, 0x04,
		0x02, 0x3C, 0x26, 0x23, 0x26, 0x3C, 0x1E, 0xA1, 0xA1, 0x61, 0x12, 0x3A, 0x40, 0x40, 0x20, 0x7A, 0x38, 0x54, 0x54, 0x55, 0x59, 0x21,
		0x55, 0x55, 0x79, 0x41, 0x21, 0x54, 0x54, 0x78, 0x41, 0x21, 0x55, 0x54, 0x78, 0x40, 0x20, 0x54, 0x55, 0x79, 0x40, 0x0C, 0x1E, 0x52,
		0x72, 0x12, 0x39, 0x55, 0x55, 0x55, 0x59, 0x39, 0x54, 0x54, 0x54, 0x59, 0x39, 0x55, 0x54, 0x54, 0x58, 0x00, 0x00, 0x45, 0x7C, 0x41,
		0x00, 0x02, 0x45, 0x7D, 0x42, 0x00, 0x01, 0x45, 0x7C, 0x40, 0xF0, 0x29, 0x24, 0x29, 0xF0, 0xF0, 0x28, 0x25, 0x28, 0xF0, 0x7C, 0x54,
		0x55, 0x45, 0x00, 0x20, 0x54, 0x54, 0x7C, 0x54, 0x7C, 0x0A, 0x09, 0x7F, 0x49, 0x32, 0x49, 0x49, 0x49, 0x32, 0x32, 0x48, 0x48, 0x48,
		0x32, 0x32, 0x4A, 0x48, 0x48, 0x30, 0x3A, 0x41, 0x41, 0x21, 0x7A, 0x3A, 0x42, 0x40, 0x20, 0x78, 0x00, 0x9D, 0xA0, 0xA0, 0x7D, 0x39,
		0x44, 0x44, 0x44, 0x39, 0x3D, 0x40, 0x40, 0x40, 0x3D, 0x3C, 0x24, 0xFF, 0x24, 0x24, 0x48, 0x7E, 0x49, 0x43, 0x66, 0x2B, 0x2F, 0xFC,
		0x2F, 0x2B, 0xFF, 0x09, 0x29, 0xF6, 0x20, 0xC0, 0x88, 0x7E, 0x09, 0x03, 0x20, 0x54, 0x54, 0x79, 0x41, 0x00, 0x00, 0x44, 0x7D, 0x41,
		0x30, 0x48, 0x48, 0x4A, 0x32, 0x38, 0x40, 0x40, 0x22, 0x7A, 0x00, 0x7A, 0x0A, 0x0A, 0x72, 0x7D, 0x0D, 0x19, 0x31, 0x7D, 0x26, 0x29,
		0x29, 0x2F, 0x28, 0x26, 0x29, 0x29, 0x29, 0x26, 0x30, 0x48, 0x4D, 0x40, 0x20, 0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x38, 0x2F, 0x10, 0xC8, 0xAC, 0xBA, 0x2F, 0x10, 0x28, 0x34, 0xFA, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x08, 0x14, 0x2A, 0x14, 0x22, 0x22,
		0x14, 0x2A, 0x14, 0x08, 0xAA, 0x00, 0x55, 0x00, 0xAA, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x10, 0x10, 0x10,
		0xFF, 0x00, 0x14, 0x14, 0x14, 0xFF, 0x00, 0x10, 0x10, 0xFF, 0x00, 0xFF, 0x10, 0x10, 0xF0, 0x10, 0xF0, 0x14, 0x14, 0x14, 0xFC, 0x00,
		0x14, 0x14, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x14, 0x14, 0xF4, 0x04, 0xFC, 0x14, 0x14, 0x17, 0x10, 0x1F, 0x10, 0x10,
		0x1F, 0x10, 0x1F, 0x14, 0x14, 0x14, 0x1F, 0x00, 0x10, 0x10, 0x10, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x1F,
		0x10, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x00, 0x00, 0x00, 0xFF, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xFF, 0x10, 0x00,
		0x00, 0x00, 0xFF, 0x14, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x1F, 0x10, 0x17, 0x00, 0x00, 0xFC, 0x04, 0xF4, 0x14, 0x14, 0x17,
		0x10, 0x17, 0x14, 0x14, 0xF4, 0x04, 0xF4, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0xF7, 0x00, 0xF7,
		0x14, 0x14, 0x14, 0x17, 0x14, 0x10, 0x10, 0x1F, 0x10, 0x1F, 0x14, 0x14, 0x14, 0xF4, 0x14, 0x10, 0x10, 0xF0, 0x10, 0xF0, 0x00, 0x00,
		0x1F, 0x10, 0x1F, 0x00, 0x00, 0x00, 0x1F, 0x14, 0x00, 0x00, 0x00, 0xFC, 0x14, 0x00, 0x00, 0xF0, 0x10, 0xF0, 0x10, 0x10, 0xFF, 0x10,
		0xFF, 0x14, 0x14, 0x14, 0xFF, 0x14, 0x10, 0x10, 0x10, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x10, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x38, 0x44, 0x44,
		0x38, 0x44, 0x7C, 0x2A, 0x2A, 0x3E, 0x14, 0x7E, 0x02, 0x02, 0x06, 0x06, 0x02, 0x7E, 0x02, 0x7E, 0x02, 0x63, 0x55, 0x49, 0x41, 0x63,
		0x38, 0x44, 0x44, 0x3C, 0x04, 0x40, 0x7E, 0x20, 0x1E, 0x20, 0x06, 0x02, 0x7E, 0x02, 0x02, 0x99, 0xA5, 0xE7, 0xA5, 0x99, 0x1C, 0x2A,
		0x49, 0x2A, 0x1C, 0x4C, 0x72, 0x01, 0x72, 0x4C, 0x30, 0x4A, 0x4D, 0x4D, 0x30, 0x30, 0x48, 0x78, 0x48, 0x30, 0xBC, 0x62, 0x5A, 0x46,
		0x3D, 0x3E, 0x49, 0x49, 0x49, 0x00, 0x7E, 0x01, 0x01, 0x01, 0x7E, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x44, 0x44, 0x5F, 0x44, 0x44, 0x40,
		0x51, 0x4A, 0x44, 0x40, 0x40, 0x44, 0x4A, 0x51, 0x40, 0x00, 0x00, 0xFF, 0x01, 0x03, 0xE0, 0x80, 0xFF, 0x00, 0x00, 0x08, 0x08, 0x6B,
		0x6B, 0x08, 0x36, 0x12, 0x36, 0x24, 0x36, 0x06, 0x0F, 0x09, 0x0F, 0x06, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00,
		0x30, 0x40, 0xFF, 0x01, 0x01, 0x00, 0x1F, 0x01, 0x01, 0x1E, 0x00, 0x19, 0x1D, 0x17, 0x12, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00,
		0x00, 0x00, 0x00 };
/*
 * constructor
 *
 */
bitmap::bitmap(int pWidth, int pHeight)
{
	width = pWidth;
	height = pHeight;
	
	mMemory.resize(width);
	for (int i = 0; i < width; i++)
		mMemory[i].resize(height);
	clear();
}

/*
 * destructor
 *
 */
bitmap::~bitmap()
{
	mMemory.clear();
	mLayers.clear();
}

/*
 * private functions
 *
 */
void bitmap::draw_circle_helper(int x0, int y0, int r, uint8_t cornername, rgb_color pColor)
{
	int f = 1 - r;
	int ddF_x = 1;
	int ddF_y = -2 * r;
	int x = 0;
	int y = r;

	while (x < y)
	{
		if (f >= 0)
		{
			y--;
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		if (cornername & 0x4)
		{
			set_pixel(x0 + x, y0 + y, pColor);
			set_pixel(x0 + y, y0 + x, pColor);
		}
		if (cornername & 0x2)
		{
			set_pixel(x0 + x, y0 - y, pColor);
			set_pixel(x0 + y, y0 - x, pColor);
		}
		if (cornername & 0x8)
		{
			set_pixel(x0 - y, y0 + x, pColor);
			set_pixel(x0 - x, y0 + y, pColor);
		}
		if (cornername & 0x1)
		{
			set_pixel(x0 - y, y0 - x, pColor);
			set_pixel(x0 - x, y0 - y, pColor);
		}
	}
}

void bitmap::fill_circle_helper(int x0, int y0, int r, uint8_t cornername, int delta, rgb_color pColor)
{
	int f = 1 - r;
	int ddF_x = 1;
	int ddF_y = -2 * r;
	int x = 0;
	int y = r;

	while (x < y)
	{
		if (f >= 0)
		{
			y--;
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;

		if (cornername & 0x1)
		{
			draw_fast_vertical_line(x0 + x, y0 - y, 2 * y + 1 + delta, pColor);
			draw_fast_vertical_line(x0 + y, y0 - x, 2 * x + 1 + delta, pColor);
		}
		if (cornername & 0x2)
		{
			draw_fast_vertical_line(x0 - x, y0 - y, 2 * y + 1 + delta, pColor);
			draw_fast_vertical_line(x0 - y, y0 - x, 2 * x + 1 + delta, pColor);
		}
	}
}

void bitmap::draw_fast_vertical_line(int x, int y, int h, rgb_color pColor)
{
	for (int i = 0; i < h; y++)
	{
		set_pixel(x, y + i, pColor);
	}
}

void bitmap::draw_fast_horizontal_line(int x, int y, int w, rgb_color pColor)
{
	for (int i = 0; i < w; y++)
	{
		set_pixel(x + i, y, pColor);
	}
}

void bitmap::draw_char(int x, int y, unsigned char c, rgb_color pColor)
{
	if ((x >= width) || (y >= height) || ((x + 5) < 0) || ((y + 7) < 0))
		return;

	for (int8_t i = 0; i < 6; i++)
	{
		uint8_t line;
		if (i == 5)
			line = 0x0;
		else
			line = font[(c * 5) + i];
		for (int8_t j = 0; j < 8; j++)
		{
			set_pixel(x + i, y + j, pColor);
			line >>= 1;
		}
	}
}

/*
 * public functions
 *
 */
void bitmap::fill(rgb_color pColor)
{
	for (int y = 0; y < height; y++)
	{
		for (int x = 0; x < width; x++)
		{
			mMemory[x][y] = pColor;
		}
	}
}

void bitmap::clear()
{
	fill(ColorBlack);
}

rgb_color bitmap::get_pixel(int x, int y)
{
	return (mMemory[x][y]);
}

void bitmap::set_pixel(int x, int y, rgb_color pColor)
{
	if (x >= width)
		return;
	if (y >= height)
		return;
	mMemory[x][y] = pColor;
}

hsv_color bitmap::get_hsv_pixel(int x, int y)
{
	return (rgb_to_hsv(mMemory[x][y]));
}

void bitmap::set_hsv_pixel(int x, int y, hsv_color pColor)
{
	if (x >= width)
		return;
	if (y >= height)
		return;
	mMemory[x][y] = hsv_to_rgb(pColor);
}

void bitmap::move_to(int x, int y)
{
	mLocationX = x;
	mLocationY = y;
}

void bitmap::line_to(int x, int y, rgb_color pColor)
{
	float x1, x2, y1, y2;
	
	x1 = (float) mLocationX;
	y1 = (float) mLocationY;
	x2 = (float) x;
	y2 = (float) y;
	
	const bool steep = (fabs(y2 - y1) > fabs(x2 - x1));
	if (steep)
	{
		swap(x1, y1);
		swap(x2, y2);
	}
	
	if (x1 > x2)
	{
		swap(x1, x2);
		swap(y1, y2);
	}
	
	const float dx = x2 - x1;
	const float dy = fabs(y2 - y1);
	
	float error = dx / 2.0f;
	const int ystep = (y1 < y2) ? 1 : -1;
	int y0 = (int) (y1 + 0.5f);
	
	const int maxX = (int) (x2 + 0.5f);
	
	for (int x0 = (int) x1; x0 <= maxX; x0++)
	{
		if (steep)
		{
			set_pixel(y0, x0, pColor);
		}
		else
		{
			set_pixel(x0, y0, pColor);
		}
		
		error -= dy;
		if (error < 0)
		{
			y0 += ystep;
			error += dx;
		}
	}
	
	mLocationX = x;
	mLocationY = y;
}

void bitmap::draw_circle(int x0, int y0, int r, rgb_color pColor)
{
	int f = 1 - r;
	int ddF_x = 1;
	int ddF_y = -2 * r;
	int x = 0;
	int y = r;

	set_pixel(x0, y0 + r, pColor);
	set_pixel(x0, y0 - r, pColor);
	set_pixel(x0 + r, y0, pColor);
	set_pixel(x0 - r, y0, pColor);

	while (x < y)
	{
		if (f >= 0)
		{
			y--;
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;

		set_pixel(x0 + x, y0 + y, pColor);
		set_pixel(x0 - x, y0 + y, pColor);
		set_pixel(x0 + x, y0 - y, pColor);
		set_pixel(x0 - x, y0 - y, pColor);
		set_pixel(x0 + y, y0 + x, pColor);
		set_pixel(x0 - y, y0 + x, pColor);
		set_pixel(x0 + y, y0 - x, pColor);
		set_pixel(x0 - y, y0 - x, pColor);
	}
}

void bitmap::fill_circle(int x0, int y0, int r, rgb_color pColor)
{
	draw_fast_vertical_line(x0, y0 - r, 2 * r + 1, pColor);
	fill_circle_helper(x0, y0, r, 3, 0, pColor);
}

void bitmap::draw_rect(int x, int y, int w, int h, rgb_color pColor)
{
	draw_fast_horizontal_line(x, y, w, pColor);
	draw_fast_horizontal_line(x, y + h - 1, w, pColor);
	draw_fast_vertical_line(x, y, h, pColor);
	draw_fast_vertical_line(x + w - 1, y, h, pColor);
}

void bitmap::fill_rect(int x, int y, int w, int h, rgb_color pColor)
{
	for (int i = x; i < x + w; i++)
	{
		draw_fast_vertical_line(i, y, h, pColor);
	}
}

void bitmap::draw_round_rect(int x, int y, int w, int h, int r, rgb_color pColor)
{
	draw_fast_horizontal_line(x + r, y, w - 2 * r, pColor);
	draw_fast_horizontal_line(x + r, y + h - 1, w - 2 * r, pColor);
	draw_fast_vertical_line(x, y + r, h - 2 * r, pColor);
	draw_fast_vertical_line(x + w - 1, y + r, h - 2 * r, pColor);

	draw_circle_helper(x + r, y + r, r, 1, pColor);
	draw_circle_helper(x + w - r - 1, y + r, r, 2, pColor);
	draw_circle_helper(x + w - r - 1, y + h - r - 1, r, 4, pColor);
	draw_circle_helper(x + r, y + h - r - 1, r, 8, pColor);
}

void bitmap::fill_round_rect(int x, int y, int w, int h, int r, rgb_color pColor)
{
	fill_rect(x + r, y, w - 2 * r, h, pColor);
	fill_circle_helper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, pColor);
	fill_circle_helper(x + r, y + r, r, 2, h - 2 * r - 1, pColor);
}

void bitmap::print_string(int x, int y, string s, rgb_color pColor)
{
	char *str = s.c_str();
	while(*str)
	{
		draw_char(x, y, *str, pColor);
		str++;
		x+= 6;
	}
}

void bitmap::assign(bitmap *pBitmap)
{
	for (int y = 0; y < height; y++)
	{
		for (int x = 0; x < width; x++)
		{
			set_pixel(x, y, pBitmap->get_pixel(x, y));
		}
	}
}

string bitmap::to_string()
{
	char buf[16];
	string result;
	for (int y = 0; y < height; y++)
	{
		for (int x = 0; x < width; x++)
		{
			sprintf(buf, "%2.2X%2.2X%2.2X", mMemory[x][y].R, mMemory[x][y].G, mMemory[x][y].B);
			result.append(buf);
		}
	}
	return result;
}

bitmap *bitmap::add_layer()
{
	bitmap *layer = new bitmap(width, height);
	mLayers.push_back(layer);
	return layer;
}

void bitmap::render()
{
	for (int y = 0; y < height; y++)
	{
		for (int x = 0; x < width; x++)
		{
			for (auto &layer : mLayers)
			{
				mMemory[x][y] = alpha_blend(mMemory[x][y], layer->get_pixel(x, y));
			}
			mMemory[x][y].A = 255; // final alpha must be full
		}
	}
}

